import config from '../config';
/**+
 * 功能说明：request请求封装
 * @param method 请求类型
 * @param url 请求地址
 * @param params 请求参数
 * @param reqConfig 请求配置
 */
export function request(method, url, params = {}, reqConfig) {
    const { showToast = true, contentType = 'application/json', loadingTitle = '' } = reqConfig;
    const token = wx.getStorageSync('token') || '';
    const env = wx.getStorageSync('env');
    if (config.env !== env) {
        wx.removeStorageSync('token');
        wx.setStorageSync('env', config.env);
    }
    return new Promise((resolve, reject) => {
        showToast && wx.showLoading({
            title: loadingTitle || '加载中'
        });
        wx.request({
            url: config.rootUrl + url,
            data: params,
            header: {
                'content-type': contentType,
                'Authorization': `Bearer ${token}`
            },
            method: method,
            success: (res) => {
                showToast && wx.hideLoading();
                const { data } = res;
                if (data.status === 200) {
                    resolve(data);
                }
                else if (data.status === 401) {
                    // 登录
                    resolve(data);
                }
                else {
                    showToast && (wx.showToast({
                        icon: 'none',
                        title: data.message
                    }));
                    reject(data);
                }
            },
            fail: (err) => {
                console.log('request fail:', err);
                if (err.errMsg && err.errMsg.indexOf('request:fail') > -1) {
                    setTimeout(() => {
                        resolve(request(method, url, params, reqConfig));
                    }, 100);
                }
                else {
                    showToast && wx.hideLoading();
                    wx.showToast({
                        icon: 'none',
                        title: err.errMsg
                    });
                    reject(err);
                }
            }
        });
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsR0FBRyxDQUFDLENBQUE7aUJBQ1o7WUFDSCxDQUFDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDIiwiZmlsZSI6ImFwaS9yZXF1ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9jb25maWcnXG4gIFxuaW50ZXJmYWNlIFJlcUNvbmZpZyB7XG4gIHNob3dUb2FzdD86IGJvb2xlYW5cbiAgY29udGVudFR5cGU/OiBzdHJpbmdcbiAgbG9hZGluZ1RpdGxlPzogc3RyaW5nXG59XG5cbmludGVyZmFjZSBTdWNjZXNzUmVzPFI+IHtcbiAgLyoqIOW8gOWPkeiAheacjeWKoeWZqOi/lOWbnueahOaVsOaNriAqL1xuICBkYXRhOiB7XG4gICAgZGF0YTogUlxuICAgIG1lc3NhZ2U6IHN0cmluZ1xuICAgIHN0YXR1czogbnVtYmVyXG4gIH1cbiAgLyoqIOW8gOWPkeiAheacjeWKoeWZqOi/lOWbnueahCBIVFRQIFJlc3BvbnNlIEhlYWRlciAqL1xuICBoZWFkZXI6IG9iamVjdFxuICAvKiog5byA5Y+R6ICF5pyN5Yqh5Zmo6L+U5Zue55qEIEhUVFAg54q25oCB56CBICovXG4gIHN0YXR1c0NvZGU6IG51bWJlclxuICBlcnJNc2c6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgRmFpbFJlcyB7XG4gIGVyck1zZzogc3RyaW5nXG59XG5cbi8qKitcbiAqIOWKn+iDveivtOaYju+8mnJlcXVlc3Tor7fmsYLlsIHoo4VcbiAqIEBwYXJhbSBtZXRob2Qg6K+35rGC57G75Z6LXG4gKiBAcGFyYW0gdXJsIOivt+axguWcsOWdgFxuICogQHBhcmFtIHBhcmFtcyDor7fmsYLlj4LmlbBcbiAqIEBwYXJhbSByZXFDb25maWcg6K+35rGC6YWN572uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXF1ZXN0PFI+KG1ldGhvZDogJ0dFVCcgfCAnUE9TVCcgfCAnUFVUJyB8ICdERUxFVEUnLCB1cmw6IHN0cmluZywgcGFyYW1zID0ge30sIHJlcUNvbmZpZzogUmVxQ29uZmlnKSB7XG4gIGNvbnN0IHsgc2hvd1RvYXN0ID0gdHJ1ZSwgY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24vanNvbicsIGxvYWRpbmdUaXRsZSA9ICcnIH0gPSByZXFDb25maWdcblxuICBjb25zdCB0b2tlbiA9IHd4LmdldFN0b3JhZ2VTeW5jKCd0b2tlbicpIHx8ICcnXG4gIGNvbnN0IGVudiA9IHd4LmdldFN0b3JhZ2VTeW5jKCdlbnYnKVxuICBpZiAoY29uZmlnLmVudiAhPT0gZW52KSB7XG4gICAgd3gucmVtb3ZlU3RvcmFnZVN5bmMoJ3Rva2VuJylcbiAgICB3eC5zZXRTdG9yYWdlU3luYygnZW52JywgY29uZmlnLmVudilcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZTxQaWNrPFN1Y2Nlc3NSZXM8Uj4sJ2RhdGEnPltcImRhdGFcIl0gPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgc2hvd1RvYXN0ICYmIHd4LnNob3dMb2FkaW5nKHtcbiAgICAgIHRpdGxlOiBsb2FkaW5nVGl0bGUgfHwgJ+WKoOi9veS4rSdcbiAgICB9KVxuXG4gICAgd3gucmVxdWVzdCh7XG4gICAgICB1cmw6IGNvbmZpZy5yb290VXJsICsgdXJsLFxuICAgICAgZGF0YTogcGFyYW1zLFxuICAgICAgaGVhZGVyOiB7XG4gICAgICAgICdjb250ZW50LXR5cGUnOiBjb250ZW50VHlwZSxcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dG9rZW59YFxuICAgICAgfSxcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgc3VjY2VzczogKHJlczogU3VjY2Vzc1JlczxSPikgPT4ge1xuICAgICAgICBzaG93VG9hc3QgJiYgd3guaGlkZUxvYWRpbmcoKVxuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHJlc1xuICAgICAgICBpZiAoZGF0YS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIHJlc29sdmUoZGF0YSlcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgICAgLy8g55m75b2VXG4gICAgICAgICAgcmVzb2x2ZShkYXRhKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNob3dUb2FzdCAmJiAoXG4gICAgICAgICAgICB3eC5zaG93VG9hc3Qoe1xuICAgICAgICAgICAgICBpY29uOiAnbm9uZScsXG4gICAgICAgICAgICAgIHRpdGxlOiBkYXRhLm1lc3NhZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICAgIHJlamVjdChkYXRhKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZmFpbDogKGVycjogRmFpbFJlcykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygncmVxdWVzdCBmYWlsOicsIGVycilcbiAgICAgICAgaWYgKGVyci5lcnJNc2cgJiYgZXJyLmVyck1zZy5pbmRleE9mKCdyZXF1ZXN0OmZhaWwnKSA+IC0xKSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHJlcXVlc3QobWV0aG9kLCB1cmwsIHBhcmFtcywgcmVxQ29uZmlnKSlcbiAgICAgICAgICB9LCAxMDApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hvd1RvYXN0ICYmIHd4LmhpZGVMb2FkaW5nKClcbiAgICAgICAgICB3eC5zaG93VG9hc3Qoe1xuICAgICAgICAgICAgaWNvbjogJ25vbmUnLFxuICAgICAgICAgICAgdGl0bGU6IGVyci5lcnJNc2dcbiAgICAgICAgICB9KVxuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9KVxufVxuIl19
